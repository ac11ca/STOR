<?php

namespace AppBundle\Repository;
use AppBundle\Factory\TransactionFactory;

/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TransactionRepository extends \Doctrine\ORM\EntityRepository
{
    public function findByFilter($filter = null)
    {
        $query = $this->createQueryBuilder('t');
        if(!empty($filter))
        {
            $query
                ->innerJoin('t.User', 'u')
                ->where('t.stripeAuth like :filter or u.username like :filter')
                ->setParameter(':filter', "%$filter%");
        }

        return $query->getQuery()->getResult();
    }

    public function findByDate($start = null, $end = null, $machine = null)
    {
        $query = $this->createQueryBuilder('t');
        $query->select('t');

        if(!empty($start))
        {
            $query->andWhere('t.created >= :start');
            $query->setParameter(':start', $start);
        }

        if(!empty($end))
        {
            $query->andWhere('t.created <= :end');
            $query->setParameter(':end', $end);
        }

        if(!empty($machine))
        {
            $query->innerJoin('t.Machine', 'm');
            $query->andWhere('m.id = :machine');
            $query->setParameter(':machine', $machine);
        }

        $query->orderBy('t.created', 'ASC');       

        $resultset = $query->getQuery()->getResult();

        return $resultset;
    }

    public function findCurrentTransaction($machine_id)
    {
        $query = $this->createQueryBuilder('t');

        $query->select('t');

        $query->innerJoin('t.Machine', 'm')
            ->where('m.id = :id')
            ->setParameter(':id', $machine_id);

        $query->andWhere('t.status != 3 and t.status != 5 and t.status != 6');

        return $query->getQuery()->getOneOrNullResult();
    }

    public function getFactory($Doctrine)
    {
        return new TransactionFactory($this, $Doctrine, $Doctrine->getManager());
    }
}
